{"remainingRequest":"C:\\Users\\ACER SWIFT\\Documents\\Carolina\\Mision TIC\\Ciclo 3\\App---biblioteca\\Proyecto Vue\\proyecto\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\ACER SWIFT\\Documents\\Carolina\\Mision TIC\\Ciclo 3\\App---biblioteca\\Proyecto Vue\\proyecto\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\ACER SWIFT\\Documents\\Carolina\\Mision TIC\\Ciclo 3\\App---biblioteca\\Proyecto Vue\\proyecto\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ACER SWIFT\\Documents\\Carolina\\Mision TIC\\Ciclo 3\\App---biblioteca\\Proyecto Vue\\proyecto\\src\\components\\PaginaInicio.vue?vue&type=template&id=ae6e678a&","dependencies":[{"path":"C:\\Users\\ACER SWIFT\\Documents\\Carolina\\Mision TIC\\Ciclo 3\\App---biblioteca\\Proyecto Vue\\proyecto\\src\\components\\PaginaInicio.vue","mtime":1632765807167},{"path":"C:\\Users\\ACER SWIFT\\Documents\\Carolina\\Mision TIC\\Ciclo 3\\App---biblioteca\\Proyecto Vue\\proyecto\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1633048454985},{"path":"C:\\Users\\ACER SWIFT\\Documents\\Carolina\\Mision TIC\\Ciclo 3\\App---biblioteca\\Proyecto Vue\\proyecto\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1633048464683},{"path":"C:\\Users\\ACER SWIFT\\Documents\\Carolina\\Mision TIC\\Ciclo 3\\App---biblioteca\\Proyecto Vue\\proyecto\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1633048454985},{"path":"C:\\Users\\ACER SWIFT\\Documents\\Carolina\\Mision TIC\\Ciclo 3\\App---biblioteca\\Proyecto Vue\\proyecto\\node_modules\\vue-loader\\lib\\index.js","mtime":1633048464681}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}