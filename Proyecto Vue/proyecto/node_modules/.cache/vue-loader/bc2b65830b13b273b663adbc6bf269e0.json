{"remainingRequest":"C:\\Users\\USUARIO\\Desktop\\App---biblioteca\\Proyecto Vue\\proyecto\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\USUARIO\\Desktop\\App---biblioteca\\Proyecto Vue\\proyecto\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\USUARIO\\Desktop\\App---biblioteca\\Proyecto Vue\\proyecto\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\USUARIO\\Desktop\\App---biblioteca\\Proyecto Vue\\proyecto\\src\\components\\PaginaInicio.vue?vue&type=template&id=ae6e678a&","dependencies":[{"path":"C:\\Users\\USUARIO\\Desktop\\App---biblioteca\\Proyecto Vue\\proyecto\\src\\components\\PaginaInicio.vue","mtime":1632352923639},{"path":"C:\\Users\\USUARIO\\Desktop\\App---biblioteca\\Proyecto Vue\\proyecto\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\App---biblioteca\\Proyecto Vue\\proyecto\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\App---biblioteca\\Proyecto Vue\\proyecto\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\App---biblioteca\\Proyecto Vue\\proyecto\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\App---biblioteca\\Proyecto Vue\\proyecto\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\App---biblioteca\\Proyecto Vue\\proyecto\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\App---biblioteca\\Proyecto Vue\\proyecto\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\App---biblioteca\\Proyecto Vue\\proyecto\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}